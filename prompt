# Costumizing bash prompt.

# TODO:
# - show whether we are rebasing or not.
# - counting of files will not work when there are merge conflicts.

# Define color sequences.
FADED="\[\033[38;5;102m\]"; WHITE="\[\033[0m\]"
RED="\[\033[0;31m\]"
BLUE="\[\033[0;34m\]"
MAGENTA="\[\033[38;5;5m\]"
YELLOW="\[\033[0;33m\]"

NORMAL="\[\033[0m\]"

AHEAD_CHAR="△"
BEHIND_CHAR="▼"
NEUTRAL_CHAR="◌"
DIV_CHAR="◆"
ERROR="$RED\342\234\227"; SUCCES="$BGREEN\342\234\223"
JOBS_CHAR="⟁"

TRI_CLOSE="▶"

git_branch_name () {
	echo "$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
}

git_dirty () {
	local status="$(git status --porcelain 2> /dev/null)"

	local staged="$(echo "$status" | grep -c ^\[^\ ?\])"
	local untracked="$(echo "$status" | grep -c \^??)"
	local unstaged="$(echo "$status" | grep -c \^\ )"

	if [[ "$unstaged" -ne 0 ]]; then echo -n "$RED$1$FADED"
	elif [[ "$staged" -ne 0 ]]; then echo -n "$YELLOW$1$FADED"
	else echo -n "$BLUE$1"
	fi

	if [[ "$staged" -ne 0 ]]; then echo -n "$FADED s:$staged"; fi
	if [[ "$unstaged" -ne 0 ]]; then echo -n "$FADED m:$unstaged"; fi
	if [[ "$untracked" -ne 0 ]]; then echo -n "$FADED u:$untracked"; fi
}

git_ahead () {
	local status="$(git branch -v)"
	aheadRegex="\* [-/_A-Za-z0-9+.]* *[0-9a-f]{7,40} \[ahead [0-9]+\]"
	behindRegex="\* [-/_A-Za-z0-9+.]* *[0-9a-f]{7,40} \[behind [0-9]+\]"
	divergent="\* [-/_A-Za-z0-9+.]* *[0-9a-f]{7,40} \[ahead [0-9]+, behind [0-9]+\]"

	if [[ "$status" =~ $aheadRegex ]]; then echo -n  "$WHITE$AHEAD_CHAR";
	elif [[ "$status" =~ $behindRegex ]]; then echo -n  "$WHITE$BEHIND_CHAR";
	elif [[ "$status" =~ $divergent ]]; then echo -n "$RED$DIV_CHAR";
	else echo -n "$WHITE$NEUTRAL_CHAR";
	fi
}

git_info () {
	local branchName="$(git_branch_name)"
	if [[ -n "$branchName"  ]]; then
		local ahead="$(git_ahead)"
		if [[ -n "$ahead" ]]; then branchName="$branchName $ahead"; fi
		echo -n "( $(git_dirty "$branchName")$NORMAL )"
	fi
}

jobs_info () {
	local nrOfJobs="$(jobs | wc -l)"
	echo -n "$YELLOW\j $JOBS_CHAR$NORMAL"
}

truncated_dir () {
	local dir="${PWD#${HOME}}";
	local length=${#dir}

	[ "${PWD}" != "${dir}" ] && printf "~";

	if (( ${length} < 75 )); then
		printf "${dir}";
	else
		IFS=/;

		local index=0;

		for q in ${dir:1}; do
			length=$(( ${length} - ${#q} + 1 ))
			index=$(( ${index} + ${#q} + 1 ))
			printf /${q:0:1};
			if (( length < 75 )); then break; fi
		done;

		printf "${dir:${index}}";
	fi
}

bash_prompt_cmd () {
	# Start off with a newline, otherwise things look cluthered.
	local firstLine="\n$MAGENTA$TRI_CLOSE$NORMAL "

	# Show the number of stopped jobs, but only if there are any.
	if [[ -n "$(jobs)" ]]; then firstLine+="( $(jobs_info) ) "; fi

	# Add (potential version contral info.
	firstLine+="$(git_info) $MAGENTA$(truncated_dir)$NORMAL"

	local secondLine="\n"

	if [[ ${EUID} == 0 ]]; then secondLine+="$RED#$NORMAL ";
	else
		if [[ $(sudo -n whoami 2> /dev/null) =~ 'root' ]]; then
			secondLine+="$YELLOW\$$NORMAL "
		elif [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
			secondLine+="$BLUE\$$NORMAL ";
		else
			secondLine+="\$ ";
		fi
	fi

	# Resseting colors and such fur user input.
	export PS1="$firstLine$secondLine${NORMAL}"
}


PROMPT_COMMAND=bash_prompt_cmd
