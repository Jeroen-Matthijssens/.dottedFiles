global !p
def nl (snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl": snip += ""
	else: snip.rv += " "

def getArgs (group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel (word):
	if word: return word[0].upper() + word[1:]

def setAttributes (snip, attrString):
	attrs = getArgs(attrString)
	for attr in attrs: snip.rv += "\n\tprivate " + attr[0] + " " + attr[1]+ ";"
	if len (attrs) > 0: snip.rv +="\n"

def getGetter (type, name):
	return "public %s get%s () { return %s; }" % (type, camel(name), name)

def getSetter (type, name):
	return "public void set%s (%s %s) { this.%s = %s; }" % (camel(name), type, name, name, name)

def getGettersAndSetters (snip, attrString):
	attrs = getArgs(attrString)
	if len (attrs) > 0: snip.rv += "\n"
	for attr in attrs: snip.rv += "\t" + getGetter (attr [0], attr[1]) + "\n"
	if len (attrs) > 0: snip.rv += "\n"
	for attr in attrs: snip.rv += "\t" + getSetter (attr [0], attr[1]) + "\n"

def getClassName (snip): snip.rv = snip.basename or "untitled"
endglobal

snippet pa "package" b
package `!p
parts = os.getcwd ().split ("/") +  path.split ("/")
try:
	srcIndex = parts.index ("src")
	testIndex = parts.index ("test")
	index = max (srcIndex, testIndex)
	snip.rv = ".".join (parts[srcIndex+1:-1])
except ValueError, e:
	snip.rv = parts[-2]
`;
endsnippet

snippet class "class" b
/*
 * class `!p getClassName (snip)`
 * @author `git config user.name`
 * @email `git config user.email`
 */
public class `!p getClassName (snip)` {
`!p setAttributes (snip, t[1])`
	/*
	 * Constructor for `!p getClassName (snip)`
	 */
	public `!p getClassName (snip)` ($1) {$2}
`!p getGettersAndSetters (snip, t[1])`
	$0

}
endsnippet

snippet interface "interface" b
/*
 * interface `!p getClassName (snip)`
 * @author `git config user.name`
 * @email `git config user.email`
 */
public interface `!p getClassName (snip)` {
	$0
}
endsnippet

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet m "public method" b
public ${1:void} ${2:method} ($3) {
	$0
}
endsnippet

snippet pm "private method" b
private ${1:void} ${2:method} ($3) {
	$0
}
endsnippet

snippet for "for" b
for (${1:int i = 0}; $2; ${3:i+})`!p nl(snip)`{
	$0
}
endsnippet

snippet sout "print" b
System.out.println ($0);
endsnippet

snippet gs "getter and setter" b
public ${2:Object} get${1:Parameter} () { return ${3:${1/\w+/\L$0\E/}}; }
public void set$1 ($2 $3) { this.$3 = $3; }
endsnippet

snippet co "constant" b
static public final ${1:String} ${2:var} = $0;
endsnippet

# vim:ft=snippets:

