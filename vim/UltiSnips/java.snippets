###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.

global !p
def nl(snip):
    if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
        snip += ""
    else:
        snip.rv += " "
endglobal

snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet cos "constant string" b
static public final String ${1:var} = "$0";
endsnippet

snippet co "constant" b
static public final ${1:String} ${2:var} = $0;
endsnippet

snippet for "for" b
for (${1:int i = 0}; $2; ${3:i+})`!p nl(snip)`{
	$0
}
endsnippet

snippet class "class" b
/*
 * class $1
 * @author `git config user.name`
 * @email `git config user.email`
 */
class ${1:`!p snip.rv = snip.basename or "untitled"`} {

	/*
	 * Constructor for $1
	 */
	public $1 ($2) { $3 }

	$0

}
endsnippet

snippet interface "interface" b
/*
 * class $1
 * @author `git config user.name`
 * @email `git config user.email`
 */
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet m "method" b
${1:void} ${2:method}($3) ${4:throws $5 }{
	$0
}
endsnippet

snippet pa "package" b
package `!p
fullpath = os.getcwd () + "--" + path.split (".")[0]
afterSrc = fullpath.find ("src/") + 4
snip.rv = ".".join (fullpath [afterSrc:].split ("/"))`
endsnippet

snippet sout "print" b
System.out.println ($0);
endsnippet

snippet TestCase "test case"
/*
 * class $1
 * @author `git config user.name`
 * @email `git config user.email`
 */
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet t "test" b
public void test${1:Name} () throws Exception`!p nl(snip)`{
	$0
}
endsnippet

snippet gs "getter and setter" b
/*
 * @return the $1
 */
public ${2:Object} get${1:Parameter} () {
	return ${3:${1/\w+/\L$0\E/}};
}

/*
 * @param $1 the $1 to set
 */
public void set$1 ($2 $3) {
	this.$3 = $3;
}
endsnippet

# vim:ft=snippets:
